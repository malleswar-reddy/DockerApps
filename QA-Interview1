Meater box 1no 
2pol 32A MCB 1no
2pol MCB pvc box 1no
4F GI pipe 1no
3/4 pipe 3nos
3/4 bend 6nos
Coller 3nos
Holder wall 2nos
8m box with plate 1no 
10A socket 2nos 
10A switch 4nos 
10 sq mm Al wire 1coil
Gi wire 1/2 kg 
3hol insulator 40nos 
1.5 sq mm wire 30mtr 
Insulation Tape 2nos 
Cable ties 150mm 1pkt













Split an array into chunks with a specified size. Code Template - 
https://onlinegdb.com/Ptod_C-qS 
Ask candidate to fork this code Ensure the candidate fork is given the detailed feedback Ensure the candidate output is copy pasted into the detailed feedback Example - array = [1,2,3,4,5] 
chunkSize = 1 [1] [2] [3] [4] [5] 
chunkSize = 2 [1, 2] [3, 4] [5] 
chunkSize = 3 [1, 2, 3] [4, 5] 
chunkSize = 4 [1, 2, 3, 4] [5] 
chunkSize = 5 [1, 2, 3, 4, 5] 
chunkSize = 6 [1, 2, 3, 4, 5]

This is a problem around OO design Ask the candidate to start a new code snippet in onlingdb. Once the questions are done, make sure the code snippet is put in the feedback comments. You have to design a solution (classes, interfaces, etc etc) for DeckofCards. Each card has a suit (heart, spade, club, diamond) and a rank (ace, king, queen jack, 10, 9, 8, 7, 6, 5, 4, 3, 2). Problem 
1 Write a function to Compare two cards and return bigger one. Suit doesnt matter. Problem 
2 You are given a shuffled deck of cards. You have to sort them (by suit and then by rank) 

Flatten nested arrays in java. 

1. Numbers or nested arrays can be upto n levels. 
2. Recursive approach - Good to know Code Template - https://onlinegdb.com/O1TZTwvHT Ensure the candidate fork is given the detailed feedback Ensure the candidate output is copy pasted into the detailed feedback Example Input -> [[[1],2],[3,4]] Output -> [1,2,3,4]

Can one use an Employee class as a key in a HashMap?

Employee Table -- Id -- Name -- Salary -- Department id Find one employee from each department who is getting the highest salary within his department. Discuss further on server side pagination, boundary cases like 2 emp getting the same salary in the same department which is highest etc.
SELECT e.empid, e.empname, e.salary, e.dept
FROM Employee e
WHERE Salary = (
    SELECT MAX(ei.Salary)
    FROM Employee ei
    WHERE ei.dept = e.dept
);



Consider a class A with a synchronized method

 class A { 

   public void synchronized m1() {
 Thread.sleep(5000);
 } } 

 We create two objects of this class - o1 and o2. 
 We call o1.m1() on one thread and o2.m1() on another thread, at the same time. 
 What will be the behaviour? Follow up with - how will you force these calls to execute one after the other





java 

Arrays.list(java.toCharArray[])

Set<Char> data = new Hashset();

Optional<Char> out = chatlist.stream().filter(e -> !data.add(e)).findfirst();

if(out.isprest()){
	Char outchar = out.get();
}


Map<Char,Interger> outchar = chatlist.stream().Collection.collect(collectection.Gruopby(),Computer.count());

class SingleTon{
	
	private final staic SingleTon instance = null;

	private SingleTon(){}

	public static SingleTon getinstance(){

		if(instance == null && instance instanseof SingleTon.class ){

		synchronized	sysnzde{
				if(instance == null){

					instance = new SingleTon();
				}

			}
		}

		return instance;
	}


}


@RestController
@RequestMapping("/api/v1")
public class EmplyeeController{
	
	@AutoWried
	Empyeeservice empyeeservice;
 
 @GetMapping("empolyeelist")
 public List<Empoyee> getAllEmployee(){
 	returns empyeeservice.getAllEmployee();
 }


 @GetMapping("empolyee/{id}")
 public  Empoyee getAllEmployee(@pathVariable long id){

 	returns empyeeservice.getEmpyeeid(id);
 }


}


class Empyeeservice{
	
	@AUtoWried
	Empyeerepro	empyeerepro;

	public Empoyee getEmpyeeid(long id){
		Optional<Empoyee>  empopt= 	empyeerepro.getbyId(id);
		return empopt.ispresent() ? empopt.get() : new Empoyee();
	}
	
}

@Query(select )
empyeerepro.getbyId(id);






listemp.stream().filter(e -> e.getAge() > 20).forEach(System.out::Println);

listemp.Stream().collect(Collect.Groupy(Empoyee::hetDEP,Collect.count()))

Empoyee 
	Id , salrly ,DEP


	select * from Empoyee where Orderby salrly limit 2,3;



list.stream().filter(e -> e.getAge() > 18 ).forEach(System.out::Println);




{2,3,4,5,6}

List<Interger> listNumber = Arrays.aslist({2,3,4,5,6}).stream().map(e -> e * e).collect(Collectors.tolist());




.............












Class SingleTon {
	
	private SingleTon instance;

	private SingleTon(){

	}

	public SingleTon getinstance(){
		Synzed{
			if(instance == null){
				instance =  new SingleTon();
			}
			return instance;
		}
	}

}

Empoyee
	empid ,name,Gender

Adress
	id,empid,state,Adress


SELECT a.state,e.Gender,COUNT(e.id) as empcount FROM EMPOYEE e  JOIN Address a on e.empid = a.empid GROUP BY e.Gender,a.state 


aaaaaaaaaaa


public final class SingleTon{
	
	private singleTon = null;


	private SingleTon(){

	}

	public static SingleTon getinstance(){

		if(SingleTon == null){

			singleTon = new SingleTon();
		}

		return singleTon;
	}

}






































































